#!/usr/bin/python
#________________________________________
# Date created:			Tuesday, 02 October 2001
#


#________________________________________
# Global imports
#

from __future__ import print_function
import sys


#________________________________________
# Class definitions
#

#
# CodexArchive objects possess knowledge of enciphered codex files
#

class CodexArchive:

    def __init__(self, base_url=None):
        self.base_url		= base_url
        self.debug		= False

    def assemble_url(self, index):
        assembled_url		= '/'.join((self.base_url.rstrip('/'), str(index)))
        if self.debug:
            sys.stderr.write("[NOTICE] Assembled URL '%s'.\n" % assembled_url)
        return assembled_url


#
# Crypto objects en{code,crypt}/de{code,crypt} documents
#

from base64 import b64encode, b64decode
from itertools import izip, cycle

class Crypto:

    def __init__(self, key=None, plaintext=None, ciphertext=None):
        self.ciphertext		= ciphertext
        self.debug		= False
        self.key		= key
        self.plaintext		= plaintext

    def decrypt(self):
        if self.debug:
            sys.stderr.write("[NOTICE] Performing decryption.\n")
        self.plaintext		= ''.join([chr(ord(x) ^ ord(y)) for(x,y) in izip(b64decode(self.ciphertext), cycle(self.key))])
        return self.plaintext

    def encrypt(self):
        if self.debug:
            sys.stderr.write("[NOTICE] Performing encryption.\n")
        self.ciphertext		= b64encode(''.join([chr(ord(x) ^ ord(y)) for(x,y) in izip(self.plaintext, cycle(self.key))]))
        return self.ciphertext


#
# Fetcher objects retrieve URLs
#

import urllib2

class Fetcher:

    def __init__(self, url=None):
        self.debug		= False
        self.url		= url

    def fetch(self):
        if self.debug:
            sys.stderr.write("[NOTICE] Fetching URL '%s'.\n" % (self.url))
        try:
            url_handle		= urllib2.urlopen(self.url)
        except urllib2.HTTPError as e:
            if self.debug:
                sys.stderr.write("[ERROR] Received HTTP code %d, '%s', fetching URL '%s'\n" % (e.code, e.msg, self.url))
            raise e
        except urllib2.URLError as e:
            if self.debug:
                sys.stderr.write("[ERROR] '%s'\n" % (e.args))
            raise e
        content			= url_handle.read().lstrip().rstrip()
        url_handle.close()
        return content.lstrip().rstrip()


#
# Mysteria objects generate codex fragment indices
#

class Mysteria:

    def __init__(self):
        self.debug		= False

    def generate(self):
        sys.path.append('lib')
        import mpmath
        root_list		= {}
        for s in [complex(0.5,t) for t in range(10,100)]:
            try:
                root_complex	= mpmath.findroot(mpmath.zeta, s)
                if self.debug:
                    sys.stderr.write("[NOTICE] Found nontrivial zeta zero at %s.\n" % str(root_complex))
                root_imag	= float(root_complex.imag)
                try:
                    root_list[root_imag]
                    if self.debug:
                        sys.stderr.write("[NOTICE] Already found this zero, skipping.\n")
                    next
                except KeyError:
                    if root_imag > 1:
                        yield root_imag
                        root_list[root_imag] = True
                    else:
                        if self.debug:
                            sys.stderr.write("[NOTICE] Irrelevant zero, skipping.\n")
            except (ValueError, OverflowError):
                pass


#________________________________________
# Main
#

#
# Announce the decoder
# Read the archive URL from the command line or prompt for it
# Read the decryption key from the command line or prompt for it
#

print("""
-=| }hexdump{ FOUNDATION HISTORICAL ARCHIVE DECODER |=-

""")

try:
    codex_archive_url		= sys.argv[1]
except:
    print("Enter codex archive URL: ", end='')
    codex_archive_url		= sys.stdin.readline().lstrip().rstrip()

try:
    decrypt_key			= sys.argv[2]
except:
    print("Enter decryption key: ", end='')
    decrypt_key			= sys.stdin.readline().lstrip().rstrip()

#
# Instantiate objects:
#   - Codex archive
#   - Mysteria generator
#   - URL fetcher
#

codex_archive			= CodexArchive(codex_archive_url)
codex_archive.debug		= True
mysteria			= Mysteria()
mysteria.debug			= True
fetcher				= Fetcher()
fetcher.debug			= True

#
# Create a list to contain the ciphertext fragments
# Iterate over the mysteria
#

ciphertext_list			= []

for mystery in mysteria.generate():

    #
    # Assemble the codex URL
    # Attempt to fetch the URL, appending to the ciphertext list if successful
    # Exit the loop on any error
    #

    fetcher.url			= codex_archive.assemble_url(mystery)
    try:
        ciphertext_list.append(fetcher.fetch())
    except:
        break

#
# Instantiate a crypto object
# Assign the key
# Assemble and assign the ciphertext
# Decrypt and display the plaintext
#

crypto_obj			= Crypto()
crypto_obj.key			= decrypt_key
crypto_obj.ciphertext		= "".join(ciphertext_list)
print(crypto_obj.decrypt())

#
# Finis
#

